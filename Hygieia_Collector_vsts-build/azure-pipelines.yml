# Set variables once
name: $(Build.SourceBranchName).$(date:yyyyMMdd)$(rev:.r)

variables:
  Artifactory.Repository: build-AW1192003_DevOps_Hygieia/collector/vsts-build
  WorkingDirectoryDeploy: $(System.DefaultWorkingDirectory)/docker

resources:
- repo: self
  clean: true
queue:
  name: Build
  demands: 
  - maven
  - java
  - sh

steps:
- task: SonarSource.sonarqube.15B84CA1-B62F-4A2A-A403-89B77A063157.SonarQubePrepare@4
  displayName: 'Prepare analysis on SonarQube'
  inputs:
    SonarQube: SonarWindows

    scannerMode: CLI

    configMode: manual

    cliProjectKey: '$(Build.Repository.Name)'

    cliProjectName: '$(Build.Repository.Name)'

    cliProjectVersion: '$(Build.BuildNumber)'

    extraProperties: |
     sonar.sources=src/main/java
     sonar.java.binaries=target/classes
     sonar.tests=src/test/java
     sonar.junit.reportPaths=target/surefire-reports
     sonar.jacoco.reportPaths=CCReport43F6D5EF/jacoco.exec
     sonar.java.test.binaries=target/test-classes
#     sonar.branch.name=$(Build.SourceBranchName)


- task: Maven@3
  displayName: 'Maven Build and Test'
  inputs:
    mavenPomFile: 'pom.xml'

    publishJUnitResults: true

    testResultsFiles: '**/TEST-*.xml'

    jdkArchitectureOption: 'x64'

    goals: 'clean install package'

    testRunTitle: '$(Build.Repository.Name)_$(Build.BuildNumber)_UnitTests'

    codeCoverageToolOption: JaCoCo

    mavenAuthenticateFeed: true


- task: SonarSource.sonarqube.6D01813A-9589-4B15-8491-8164AEB38055.SonarQubeAnalyze@4
  displayName: 'Run Code Analysis'

- task: CopyFiles@2
  displayName: 'Copy Jar to Docker'
  inputs:
    Contents: 'target/*.jar '

    TargetFolder: '$(System.DefaultWorkingDirectory)/docker'

- task: PublishBuildArtifacts@1
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Publish Artifact'
  inputs:
    PathtoPublish: docker

    ArtifactName: Artifact

- task: ms-devlabs.utilitytasks.task-Shellpp.Shell++@0
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  displayName: 'Deploy artifactory on Linux'
  inputs:
    type: InlineScript

    script: |
     cd  $(WorkingDirectoryDeploy)
     pwd
     #find . -type d | grep --invert-match ".git"  | sed 's/^\.\///g' | python $(specstdin)specstdin.py -P '$(Artifactory.Repository)/$(Build.BuildNumber)' -p 'Ambiente=Desarrollo' -e '.gitignore' 'user_script.sh'; mv -f specs.json ..
     
     #unset http_proxy
     #unset https_proxy
     #cd  $(WorkingDirectoryDeploy)
     #jfrog rt u --spec ../specs.json --url=$(Artifactory.Uri) --user=$(Artifactory.User) --password=$(Artifactory.Password) --build-number $(Build.BuildNumber) --build-name $(Build.DefinitionName)
     
     #unset http_proxy
     #unset https_proxy
     #jfrog rt  build-publish $(Build.DefinitionName) $(Build.BuildNumber) --url=$(Artifactory.Uri) --user=$(Artifactory.User) --password=$(Artifactory.Password)
     
     #if [ $? -eq 0 ]; then echo "Successfully deploy files"; exit 0; else echo "Could not deploy files" >&2; exit 1; fi
     exit 0

